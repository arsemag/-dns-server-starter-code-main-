#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
from pydoc import resolve


from dnslib import DNSRecord, DNSHeader, RR, QTYPE, A, dns
import dns.resolver
from io import StringIO


class Server:
    def __init__(self, root_ip, domain, port):
        self.root_ip = root_ip
        self.domain = domain

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(("0.0.0.0", port))
        self.port = self.socket.getsockname()[1]

        self.log("Bound to port %d" % self.port)

        self.records = {}  # Add this before calling parse_zone_file
        self.auth_domain = None
        self.parse_zone_file(domain)

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, addr, message):
        self.log("Sending message:\n%s" % message)
        self.socket.sendto(message.pack(), addr)

    def parse_zone_file(self, file_path):
        with open(file_path, 'r') as f:
            zone_text = f.read()

        for rr in RR.fromZone(zone_text):
            # Check if this is the SOA record
            if rr.rtype == QTYPE.SOA:
                # Store the domain (rname) from the SOA record as the authoritative domain
                self.auth_domain = str(rr.rname)
                self.log("Found SOA record for domain: %s" % self.auth_domain)

            # Add the record to the records dictionary
            name = str(rr.rname)
            if name in self.records:
                self.records[name].append(rr)
            else:
                self.records[name] = [rr]

    def forward_helper(self, client_request, ip):
        forward_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        forward_sock.settimeout(2)
        try:
            # dns_request = DNSRecord.question(client_request)
            # print(f"this is the dns request {dns_request}")
            forward_sock.sendto(client_request.pack(), (ip, 53))
            # print(f" this the client request: {client_request} and the root ip: {self.root_ip}")
            data, addr = forward_sock.recvfrom(65535)
            print(f"this is the data {data}")
            forward_response = DNSRecord.parse(data)
            print(f"DEBUG got this response: {forward_response}")
            # forward_response.header.aa = 0
            return forward_response
        except Exception as e:
            print(f"Exception: {e}")
            return None
        finally:
            forward_sock.close()

    def forward_request(self, client_request, ip):
        response = None
        query = client_request  # Original query from client (DNSRecord object)
        current_ip = self.root_ip

        for _ in range(10): # TO DO: CHANGE LATER
            # we get the response
            response = self.forward_helper(client_request, ip)
            if response is None:
                print("REPONSE NOT UPDATE")
                break

        # check if the answer section is empty
            if response.rr:
                print("ACTUALLY GOT ONE")
                response.header.aa = 0
                return response

        # NOW LOOKING THROUGH BOTH THE NS AN A RECORDS
        ns_records = response.auth
        print(f"THIS IS THE NS {ns_records}")
        additional_records = response.additional_records
        print(f"THIS IS THE ADDITIONALL {additional_records}")

        next_ip = None
        # FIRST LOOK IF WE DO HAVE ADDITIONAL RECORDS WIH THE NS NAMES
        for a in additional_records:
            if a.rtype == QTYPE.SOA:
                next_ip = a.rname
                break

        if not next_ip and ns_records:
            for ns in ns_records:
                if QTYPE[ns.rtype] == "NS":
                    ns_domain = str(ns.data) # get the domain name
                    print(f"Resolving NS domain: {ns_domain}")
                    ns_query = DNSRecord.question(ns_domain)
                    ns_response = self.forward_helper(ns_query, current_ip)
                    if ns_response:
                        for rr in ns_response.rr:
                            if rr.rtype == QTYPE.A:
                                next_ip = str(rr.rdata)
                                break

                    if next_ip:
                        break

        if next_ip:
            current_ip = next_ip
        else:

            print("No next IP found; stopping recursion")







    def recv(self, socket):
            data, addr = socket.recvfrom(65535)
            # Parse DNS request
            request = DNSRecord.parse(data)
            self.log("Received message:\n%s" % request)

            qname = str(request.q.qname)
            qtype = QTYPE[request.q.qtype]

            response = request.reply()
            if qname in self.records:
                for rr in self.records[qname]:
                    # print("this is the types: ", QTYPE[rr.rtype])
                    if QTYPE[rr.rtype] == qtype or qtype == "ANY":
                        response.add_answer(rr)
                        # print("we sent a message with this types: ", QTYPE[rr.rtype], "and the qtype: ", qtype)

                        if QTYPE[rr.rtype] == "NS":
                            # print("this is we got her")
                            ns_target = str(rr.rdata)
                            if ns_target in self.records:
                                response.add_auth(rr)
                                for r in self.records[ns_target]:
                                    if QTYPE[r.rtype] == "A":
                                        # print("got here")
                                        response.add_ar(r)

                    elif QTYPE[rr.rtype] == "CNAME":
                        # print("we sent a message with CNAME")
                        response.add_answer(rr)
                        cname_target = str(rr.rdata)
                        if cname_target in self.records:
                            for a_rr in self.records[cname_target]:
                                if a_rr.rtype == QTYPE.A:
                                    response.add_answer(a_rr)
            else:
                if qname.endswith(self.auth_domain):
                    response.header.rcode = 3
                    if self.auth_domain in self.records:
                        for rr in self.records[self.auth_domain]:
                            response.add_auth(rr)

                else:
                    self.log("No record found for %s which is outside our domain." % qname)
                    forward_response = self.forward_helper(request, self.root_ip)
                    print(f"got this response: {forward_response}")
                    if forward_response:
                        print("sending forward_response")
                        self.send(addr, forward_response)
                    else:
                        print("sending a failed forward_response")
                        response.header.rcode = 2 #SERVER FAIL
                        self.send(addr, response)



            self.send(addr, response)



    ## get the response and give back to the client
    def in_zone(self, name):
        return name == self.auth_domain

    def run(self):
        seq = 0
        while True:
            socks = select.select([self.socket], [], [], 0.1)[0]
            for conn in socks:
                self.recv(conn)

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('root_ip', type=str, help="The IP address of the root server")
    parser.add_argument('zone', type=str, help="The zone file for this server")
    parser.add_argument('--port', type=int, help="The port this server should bind to", default=0)
    args = parser.parse_args()
    sender = Server(args.root_ip, args.zone, args.port)
    sender.run()
