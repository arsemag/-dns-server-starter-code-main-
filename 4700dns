#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
from pydoc import resolve
from dnslib import DNSRecord, DNSHeader, RR, QTYPE, A, dns
from io import StringIO


class Server:
    def __init__(self, root_ip, domain, port):
        self.root_ip = root_ip
        self.domain = domain

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(("0.0.0.0", port))
        self.port = self.socket.getsockname()[1]

        self.log("Bound to port %d" % self.port)

        self.records = {}  # Add this before calling parse_zone_file
        self.auth_domain = None
        self.parse_zone_file(domain)

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, addr, message):
        self.log("Sending message:\n%s" % message)
        self.socket.sendto(message.pack(), addr)

    def parse_zone_file(self, file_path):
        with open(file_path, 'r') as f:
            zone_text = f.read()

        for rr in RR.fromZone(zone_text):
            # Check if this is the SOA record
            if rr.rtype == QTYPE.SOA:
                # Store the domain (rname) from the SOA record as the authoritative domain
                self.auth_domain = str(rr.rname)
                self.log("Found SOA record for domain: %s" % self.auth_domain)

            # Add the record to the records dictionary
            name = str(rr.rname)
            if name in self.records:
                self.records[name].append(rr)
            else:
                self.records[name] = [rr]

    def forward_helper(self, client_request, ip):
        forward_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        forward_sock.settimeout(2)
        try:
            # dns_request = DNSRecord.question(client_request)
            # print(f"this is the dns request {dns_request}")
            forward_sock.sendto(client_request.pack(), (ip, 53))
            # print(f" this the client request: {client_request} and the root ip: {self.root_ip}")
            data, addr = forward_sock.recvfrom(65535)
            forward_response = DNSRecord.parse(data)
            # print(f"DEBUG got this response: {forward_response}")
            # forward_response.header.aa = 0
            return forward_response
        except Exception as e:
            print(f"Exception: {e}")
            return None
        finally:
            forward_sock.close()

    def forward_request(self, client_request, starting_ip=None):
        # Use the provided starting IP, or default to self.root_ip if none provided.
        current_ip = starting_ip if starting_ip is not None else self.root_ip
        original_domain = client_request.q.qname

        for iteration in range(10):  # Maximum iterations to prevent infinite loops.
            # Build a fresh query for each iteration.
            query = DNSRecord.question(str(original_domain))
            response = self.forward_helper(query, current_ip)
            if response is None:
                print(f"Response not received from {current_ip}")
                break

            # If an answer is available, update flags and return response.
            if response.rr:
                print(f"Received answer from {current_ip}")
                response.header.aa = 0  # Clear AA if the answer is not authoritative.
                response.header.ra = 1  # Signal that recursive resolution is available.
                return response

            # Parse referral data to get the next serverâ€™s IP.
            ns_records = response.auth
            additional_records = response.ar  # Using the additional record section.

            next_ip = None
            # Look for an A record in the additional section.
            for a in additional_records:
                if a.rtype == QTYPE.A:
                    next_ip = str(a.rdata)
                    print("Found next IP in additional section:", next_ip)
                    break

            # If not found in additional, resolve one of the NS records.
            if not next_ip and ns_records:
                for ns in ns_records:
                    if QTYPE[ns.rtype] == "NS":
                        ns_domain = str(ns.rdata)
                        print("Resolving NS domain:", ns_domain)
                        ns_query = DNSRecord.question(ns_domain)
                        # Notice here we might want to use a known resolver (like the root) to resolve the NS.
                        ns_response = self.forward_helper(ns_query, self.root_ip)
                        if ns_response:
                            for rr in ns_response.rr:
                                if rr.rtype == QTYPE.A:
                                    next_ip = str(rr.rdata)
                                    print(f"Resolved NS {ns_domain} to IP {next_ip}")
                                    break
                        if next_ip:
                            break

            # If we have a next IP, update the current target.
            if next_ip:
                current_ip = next_ip
                print("Forwarding query to next IP:", current_ip)
            else:
                print("No next IP found; stopping recursion")
                break

        # If we exit the loop without receiving an answer, return what we got (or None).
        return response

    def recv(self, socket):
        data, addr = socket.recvfrom(65535)
        # Parse DNS request
        request = DNSRecord.parse(data)
        self.log("Received message:\n%s" % request)

        qname = str(request.q.qname)
        qtype = QTYPE[request.q.qtype]

        response = request.reply()
        if qname in self.records:
            for rr in self.records[qname]:
                if QTYPE[rr.rtype] == qtype or qtype == "ANY":
                    response.add_answer(rr)
                    if QTYPE[rr.rtype] == "NS":
                        ns_target = str(rr.rdata)
                        if ns_target in self.records:
                            response.add_auth(rr)
                            for r in self.records[ns_target]:
                                if QTYPE[r.rtype] == "A":
                                    response.add_ar(r)
                elif QTYPE[rr.rtype] == "CNAME":
                    response.add_answer(rr)
                    cname_target = str(rr.rdata)
                    if cname_target in self.records:
                        for a_rr in self.records[cname_target]:
                            if a_rr.rtype == QTYPE.A:
                                response.add_answer(a_rr)
            self.send(addr, response)
        else:
            if qname.endswith(self.auth_domain):
                response.header.rcode = 3
                if self.auth_domain in self.records:
                    for rr in self.records[self.auth_domain]:
                        response.add_auth(rr)
                self.send(addr, response)
            else:
                self.log("No record found for %s which is outside our domain." % qname)
                # Here is the updated if clause:
                forward_response = self.forward_request(request, self.root_ip)
                print(f"Got forward_response: {forward_response}")
                if forward_response:
                    # Update flags: RA signals recursive support, AA should be cleared if not authoritative.
                    forward_response.header.aa = 0
                    forward_response.header.ra = 1
                    print("Sending forward_response")
                    self.send(addr, forward_response)
                    return  # Exit after sending the forward_response.
                else:
                    print("Sending a failed forward_response")
                    response.header.rcode = 2  # SERVER FAIL
                    self.send(addr, response)
                    return
        # self.send(addr, response)


    ## get the response and give back to the client
    def in_zone(self, name):
        return name == self.auth_domain

    def run(self):
        seq = 0
        while True:
            socks = select.select([self.socket], [], [], 0.1)[0]
            for conn in socks:
                self.recv(conn)

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('root_ip', type=str, help="The IP address of the root server")
    parser.add_argument('zone', type=str, help="The zone file for this server")
    parser.add_argument('--port', type=int, help="The port this server should bind to", default=0)
    args = parser.parse_args()
    sender = Server(args.root_ip, args.zone, args.port)
    sender.run()
