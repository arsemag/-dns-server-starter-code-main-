#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
from pydoc import resolve


from dnslib import DNSRecord, DNSHeader, RR, QTYPE, A, dns
import dns.resolver
from io import StringIO


class Server:
    def __init__(self, root_ip, domain, port):
        self.root_ip = root_ip
        self.domain = domain

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(("0.0.0.0", port))
        self.port = self.socket.getsockname()[1]

        self.log("Bound to port %d" % self.port)

        self.records = {}  # Add this before calling parse_zone_file
        self.auth_domain = None
        self.parse_zone_file(domain)

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, addr, message):
        self.log("Sending message:\n%s" % message)
        self.socket.sendto(message.pack(), addr)

    def parse_zone_file(self, file_path):
        with open(file_path, 'r') as f:
            zone_text = f.read()
        for rr in RR.fromZone(zone_text):
            # Check if this is the SOA record
            if rr.rtype == QTYPE.SOA:
                # Store the domain (rname) from the SOA record as the authoritative domain
                self.auth_domain = str(rr.rname)
                self.log("Found SOA record for domain: %s" % self.auth_domain)
            # Add the record to the records dictionary
            name = str(rr.rname)
            if name in self.records:
                self.records[name].append(rr)
            else:
                self.records[name] = [rr]

    def forward_helper(self, client_request, ip):
        forward_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # creates the socket connection
        forward_sock.settimeout(2)

        try:
            forward_sock.sendto(client_request.pack(), (ip, 60053)) #sends the request to the server
            data, addr = forward_sock.recvfrom(65535)
            forward_response = DNSRecord.parse(data) # parses the response and returns it
            return forward_response
        except socket.timeout:
            print("TIME OUTTT", file=sys.stderr)
            return None
        except Exception as e:
            print(f"Error during DNS forwarding: {e}", file=sys.stderr)
            return None
        finally:
            forward_sock.close()

    def forward_request(self, client_request, ip):
        response = None
        query = client_request  # Original query from client (DNSRecord object)
        current_ip = self.root_ip

        for _ in range(10): # TO DO: CHANGE LATER
            response = self.forward_helper(query, ip)
            if response is None:
                print("REPONSE NOT UPDATE") # does it get update
                break
        # check if the answer section is empty
            if response.rr:
                print("ACTUALLY GOT ONE")
                response.header.aa = 0
                response.header.ra = 1 ## ADDED THIS AND FIXED THE ISSUE
                                       ## what it does ra flag is a signal to the client
                                      # that this server supports recursive queries
                return response


        # NOW LOOKING THROUGH BOTH THE NS AN A RECORDS
        ns_records = response.auth ## we look through authority records for the ns_records
        print(f"THIS IS THE NS {ns_records}")
        # additional_records = response.ar ## we
        # print(f"THIS IS THE ADDITIONALL {additional_records}")

        next_ip = None  # will be the next_ip address to visit

        # for rr in response.ar:
        #     if rr.rtype == QTYPE.A:
        #         next_ip = str(rr.rdata)
        #         break

        if not next_ip and ns_records:
            for ns in ns_records:
                if QTYPE[ns.rtype] == "NS":
                    print("we found ns records for the request")
                    ns_domain = str(ns.rdata) # get the domain name
                    print(f"this is the NS {ns_domain}")
                    ns_query = DNSRecord.question(ns_domain) # ask other DNS server for the ip address
                    print("current ip", current_ip)
                    ns_response = self.forward_helper(ns_query, current_ip) # forward it to the DNS servers
                    print("this is the ns_response", ns_response)
                    if ns_response:
                        print("we found ns_records for the request 2")
                        print(f"these are the records {ns_response.rr}")
                        for rr in ns_response.ar:
                            print(f"this is these are the records {rr} + \n + \n")
                            print("we found the A record for the ns")
                            next_ip = str(rr.rdata) # once we find a records we get the ip address
                            print("this is the next ip", next_ip)

            if next_ip:
                print("REPONSE GOT ONE")
                response = self.forward_helper(query, next_ip)
                if response and response.rr:
                    response.header.aa = 0
                    response.header.ra = 1
                    return response


        response.header.aa = 0
        response.header.ra = 1
        return response

    def recv(self, socket):
            data, addr = socket.recvfrom(65535)
            request = DNSRecord.parse(data)
            self.log("Received message:\n%s" % request)

            qname = str(request.q.qname)
            qtype = QTYPE[request.q.qtype]

            response = request.reply()
            if qname in self.records:
                for rr in self.records[qname]:
                    if QTYPE[rr.rtype] == qtype or qtype == "ANY":
                        response.add_answer(rr)
                        if QTYPE[rr.rtype] == "NS":
                           self.ns_case(rr, response)
                    elif QTYPE[rr.rtype] == "CNAME":
                        self.cname_case(rr, response)
            else:
                if qname.endswith(self.auth_domain):
                    response.header.rcode = 3
                    if self.auth_domain in self.records:
                        for rr in self.records[self.auth_domain]:
                            response.add_auth(rr)

                else:
                    self.send_outside_zone(request, addr, response)

            self.send(addr, response)

    def ns_case(self, record, response):
        # print("this is we got her")
        ns_target = str(record.rdata)
        if ns_target in self.records:
            response.add_auth(record)
            for r in self.records[ns_target]:
                if QTYPE[r.rtype] == "A":
                    print("got here")
                    response.add_ar(r)

    def cname_case(self, record, response):
        response.add_answer(record)
        cname_target = str(record.rdata)
        if cname_target in self.records:
            for a_rr in self.records[cname_target]:
                if a_rr.rtype == QTYPE.A:
                    response.add_answer(a_rr)

    def send_outside_zone(self, request, addr, response):
        forward_response = self.forward_request(request, self.root_ip)
        # print(f"got this response: {forward_response}")
        if forward_response:
            # print(f"sending forward_response and this is the add {addr}") # so it is sending a the foward response
            self.send(addr, forward_response)
        else:
            # print("sending a failed forward_response")
            response.header.rcode = 2  # SERVER FAIL
            self.send(addr, response)


    ## get the response and give back to the client
    def in_zone(self, name):
        return name == self.auth_domain

    def run(self):
        seq = 0
        while True:
            socks = select.select([self.socket], [], [], 0.1)[0]
            for conn in socks:
                self.recv(conn)

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('root_ip', type=str, help="The IP address of the root server")
    parser.add_argument('zone', type=str, help="The zone file for this server")
    parser.add_argument('--port', type=int, help="The port this server should bind to", default=0)
    args = parser.parse_args()
    sender = Server(args.root_ip, args.zone, args.port)
    sender.run()